"use strict";

const path			= require('path');
const ZwaveDriver	= require('homey-zwavedriver');

module.exports = new ZwaveDriver( path.basename(__dirname), {
	capabilities: {

		'onoff': {
			'command_class'				: 'COMMAND_CLASS_SWITCH_MULTILEVEL',
			'command_get'				: 'SWITCH_MULTILEVEL_GET',
			'command_set'				: 'SWITCH_MULTILEVEL_SET',
			'command_set_parser'		: function( value ){
				return {
					'Value': value
				}
			},
			'command_report'			: 'SWITCH_MULTILEVEL_REPORT',
			'command_report_parser'		: function( report ){
				if( typeof report['Value'] === 'string' ) {
					return report['Value'] === 'on/enable';
				} else {
					return report['Value (Raw)'][0] > 0;
				}

			}
		},

		'dim': {
			'command_class'				: 'COMMAND_CLASS_SWITCH_MULTILEVEL',
			'command_get'				: 'SWITCH_MULTILEVEL_GET',
			'command_set'				: 'SWITCH_MULTILEVEL_SET',
			'command_set_parser'		: function( value ){
				return {
					'Value': value * 100
				}
			},
			'command_report'			: 'SWITCH_MULTILEVEL_REPORT',
			'command_report_parser'		: function( report ){
				if( typeof report['Value'] === 'string' ) {
					return ( report['Value'] === 'on/enable' ) ? 1.0 : 0.0;
				} else {
					return report['Value (Raw)'][0] / 100;
				}
			}
		},
	settings: {
		"Input_1_type": {
			//By this parameter the user can set input based on device type (switch, potentiometer, 0-10V sensor)
			//Available configuration parameters (data type is 1 Byte DEC):
			//default value 0
			//0 - mono-stable switch type (push button) – button quick press turns between previous set dimmer value and zero)
			//1 - Bi-stable switch type
			//2 - Potentiometer (Flush Dimmer 0-10V is using set value the last received from potentiometer or from z-wave controller)
			//3 - 0-10V Temperature sensor (regulated output)
			//4 - 0-10V Illumination sensor (regulated output)
			//5 - 0-10V General propose sensor (regulated output)
			//NOTE: After parameter change to value 3,4 or 5 first exclude module (without setting parameters to default value)
			//then wait at least 30s and then re include the module!
           	"index": 1,
          	"size": 1,
          	"parser": function( input ) {
        	        return new Buffer([ parseInt(input)]);
        	    }
      		 },
        	"Activate_/_deactivate_functions_ALL_ON_/_ALL_OFF": {
			//Flush Dimmer 0-10V module responds to commands ALL ON / ALL OFF that may be sent by the main controller or
			//by other controller belonging to the system.
			//default value 255
			//255 - ALL ON active, ALL OFF active
			//0 - ALL ON is not active, ALL OFF is not active
			//1 - ALL ON is not active, ALL OFF active
			//2 - ALL ON active, ALL OFF is not active
            	"index": 10,
      	      "size": 2,
     	       "parser": function( input ) {
  	              return new Buffer([ parseInt(input) ]);
 	           }
  	      },
  	      "Automatic_turning_off_output_after_set_time": {
			//default value 0
			//0 - Auto OFF disabled 
			//1 - 32536 = 1second - 32536 seconds Auto OFF enabled with define time, step is 1 second
  	          "index": 11,
  	          "size": 2,
   	         "parser": function( input ) {
   	             return new Buffer([ parseInt(input) ]);
   	         }
  	      },
  	      "Automatic_turning_on_output_after_set_time": {
			//default value 0
			//0 - Auto ON disabled
			//1 - 32535  =  1second - 32535 seconds Auto ON enabled with define time, step is 1 second.
  	          "index": 12,
  	          "size": 2,
   	         "parser": function( input ) {
   	             return new Buffer([ parseInt(input) ]);
  	          }
 	      },
		"Enable_Disable_Double_click_function": {
			//If Double click function is enabled, a fast doubleclick on the push button will set dimming power at maximum dimming value
			//default value 0
			//0 - Double click disabled
			//1 - Double click enabled
			//Valid only if input is set as mono-stable (push button)
          	  "index": 21,
          	  "size": 1,
          	  "parser": function( input ) {
          	      return new Buffer([ ( input === true ) ? 0 : 1 ]);
         	   }
     		},
		"Saving_the_state_of_the_device_after_a_power_failure": {
     		  "index": 30,
           	  "size": 1,
	         "parser": function( input ) {
       	         return new Buffer([ ( input === true ) ? 0 : 1 ]);
		   }
	       },
		"Auto_or_manual_selection": {
			//This parameter is influencing on the software only when the value of parameter number 1 is set to value 3,4 or 5
			//In manual mode regulation (how the input influence on output) is disabled
           	 "index": 52,
        	 "size": 1,
	        "parser": function( input ) {
               	 return new Buffer([ ( input === true ) ? 0 : 1 ]);
  	          }
	       },
		"PID_value_inside_deadband": {
            "index": 53,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ ( input === true ) ? 0 : 1 ]);
            }
        },
		"PID_deadband": {
			//0 - 100 0 - 100%, step is 1%
            "index": 54,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Integral_sampling_time": {
			//default value 5 (5s)
			//0 - 127 0s to 127s, step is 1s
			//Parameter defines the time between samples. On each sample the controller capture difference between SP-act
            "index": 55,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"P_parameter": {
			//default value 100
			//0 - 1000 P value, step is 1
            "index": 56,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"I_parameter": {
			//default value 100
			//0 - 1000 I value, step is 1
            "index": 57,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"D_parameter": {
			//default value 100
			//0 - 1000 D value, step is 1
            "index": 58,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Minimum_dimming_value": {
			//default value 1 = 1% (minimum dimming value)
			//1 - 98  =  1% - 98%,  step  is  1%.  Minimum dimming values is set by entered value.
			//NOTE: The minimum level may not be higher than the maximum level!
			//1%  min. dimming value is defined by Z-Wave multilevel device class.
            "index": 60,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Manimum_dimming_value": {
			//default value 99 = 99% (Maximum dimming value)
			//2 - 99  =  2% - 99%, step is 1%. Maximum dimming values is set by entered value
			//NOTE: The maximum level may not be lower than the minimum level!
			//99% max. dimming value is defined by Z-Wave multilevel device class.
            "index": 61,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Dimming_time": {
			//Set value means time of moving the Flush Dimmer 0-10V between  min. and max. dimming values by short press of 
			//push button I1 or controlled through UI (BasicSet)
			//Available config. parameters:
			//default value 100 = 1s
			//1 - 255  =  100 mseconds - 2550 mseconds, step is 100 mseconds
            "index": 65,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Dimming_time_when_key_pressed": {
			//Time of moving the Flush Dimmer 0-10V between min. and max dimming values by continues hold of push button I1 or associated device
			//Available configuration parameters
			//default value 3 = 3s
			//1-255 = 1 second - 255 seconds
            "index": 66,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Ignore_start_level": {
			//This parameter is used with association group 3
			//A receiving device  SHOULD respect the start level if the Ignore Start Level bit is 0
			//A receiving device MUST ignore the start level if the Ignore Start Level bit is  1
			//default value 0 (respect start level)
			//1 (ignore start level)
            "index": 67,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ ( input === true ) ? 0 : 1 ]);
            }
        },
		"Dimming_duration": {
			//This parameter is used with association group 3
			//The Duration field MUST specify the time that the transition should take from the current value to the new target value
			//A supporting device SHOULD respect the specified Duration value
			//default value 0 (dimming duration according to parameter 66)
			//1 – 127 (from 1 to 127 seconds)
            "index": 68,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Temperature_sensor_offset_settings": {
			//Set value is added or subtracted to actual measured value by  sensor
			//default value 32536
			//32536 - offset is 0.0C
			//From 1 to 100 value from 0.1 °C to 10.0 °C is added to actual measured temperature
			//From 1001 to 1100 value from 0.1 °C to 10.0 °C is subtracted to actual measured temperature
            "index": 110,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Digital_temperature_sensor_reporting": {
			//If digital temperature sensor is connected, module reports measured temperature on temperature change defined by this parameter
			//default value 5 = 0,5°C change
			//0 Reporting disabled
			//1-127 = 0,1°C -12,7°C, step is 0,1°C
            "index": 120,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Input_I1_Sensor_reporting": {
			//If analogue sensor is connected, module reports measured value on change defined by this parameter
			//default value 5 = 0,5 change
			//0 Reporting disabled
			//1-10000 = 0,1 - 1000 step is 0,1
            "index": 140,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Input_I1_0-10V_reporting_threshold": {
			//Parameter defines a value by which input voltage must change in order to be reported to the main controller
			//New value is calculated based on last reported value
			//Default setting: 5 (0,5V) 
			//1-100 -(0,1 - 10V) 
            "index": 141,
            "size": 1,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Minimum_sensor_range_value": {
			//Value that must correspond to minimum sensor range value. Valid only if parameter 1 is set to values 3, 4 or 5)
			//default value 0 = 0°C / 0Lux / 0%rh
			//0 - 10000 value from 0 to 1000 (resolution 0,1)
			//10001 – 20000 value from  0,1 to 1000 (resolution 0,1)
			//NOTE: Minimum value must not be higher than maximum value!
            "index": 143,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
            }
        },
		"Manimum_sensor_range_value": {
			//Value that must correspond to maximum sensor range value. Valid only if parameter 1 is set to values 3, 4 or 5)
			//default value 1000 = 100°C / 100Lux / 100%rh
			//0 - 10000 value from 0 to 1000 (resolution 0,1)
			//10001 – 20000 value from 0,1 to 1000 (resolution 0,1)
			//NOTE: Maximum value must not be lower than minimum value!
            "index": 144,
            "size": 2,
            "parser": function( input ) {
                return new Buffer([ parseInt(input) ]);
			}
		}
	}
})
